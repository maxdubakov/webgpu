// Prefix Sum
// Implement a kernel that computes a sum over `a` and stores it in `out`. If the size of `a` is greater than the block size, only store the sum of each block using parallel prefix sum. 
// We will do this using the parallel prefix sum algorithm in shared memory. That is, each step of the algorithm should sum together half the remaining numbers.

@group(0) @binding(0) var<storage, read_write> a : array<f32>;
@group(0) @binding(1) var<storage, read_write> out : array<f32>;

const wgs = vec3({{workgroupSize}});
const twg = vec3({{totalWorkgroups}});
var<workgroup> smem: array<f32, {{smemSize}}>;

@compute @workgroup_size({{workgroupSize}})
fn main(@builtin(local_invocation_id) lid: vec3<u32>,
        @builtin(global_invocation_id) gid: vec3<u32>,
        @builtin(workgroup_id) wid: vec3<u32>) {
  smem[lid.x] = a[gid.x];
  workgroupBarrier();
  for (var skip: u32 = 1; skip < wgs.x; skip *= 2) {
    if (lid.x % skip == 0 && lid.x + skip < wgs.x && gid.x + skip < arrayLength(&a)) {
      smem[lid.x] += smem[lid.x + skip];
    }
    workgroupBarrier();
  }
  if (lid.x == 0) {
    out[wid.x] = smem[0];
  }
}
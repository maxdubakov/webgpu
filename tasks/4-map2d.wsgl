// Map 2D
// Implement a kernel that adds 10 to each position of `a` and stores it in `out`. Input `a` is 2D and square. You have more threads than positions.

@group(0) @binding(0) var<storage, read_write> a : array<f32>;
@group(0) @binding(1) var<storage, read_write> out : array<f32>;

// wgs is a vec3 containing workgroup size in x, y, z.
// the x component is wgs.x and so on
// it is used to calculate current index i
const wgs = vec3({{workgroupSize}});

@compute @workgroup_size({{workgroupSize}})
fn main(@builtin(local_invocation_id) lid: vec3<u32>) {
  let i = (lid.y * wgs.x) + lid.x;
  let len = arrayLength(&a);
  if (i < len) {
    out[i] = a[i] + 10;
  }
}
// Pooling
// Implement a kernel that sums together the last 3 positions of `a` and stores it in `out`. You have 1 thread per position.

@group(0) @binding(0) var<storage, read_write> a : array<f32>;
@group(0) @binding(1) var<storage, read_write> out : array<f32>;

const wgs = vec3({{workgroupSize}}); // workgroup sizes x, y, z
const twg = vec3({{totalWorkgroups}}); // total workgroups x, y, z
var<workgroup> smem: array<f32, {{smemSize}}>; // flat shared memory array

@compute @workgroup_size({{workgroupSize}})
fn main(@builtin(local_invocation_id) lid: vec3<u32>,
        @builtin(global_invocation_id) gid: vec3<u32>,
        @builtin(workgroup_id) wid: vec3<u32>) {
  let i = lid.x + lid.y * wgs.x; // index in array with account for 2D workgroup
  
  smem[lid.x] = a[i]; // copy from global memory to shared memory
  out[gid.x] = smem[lid.x]; // number will always add itself
  workgroupBarrier(); // ensure all threads have written to shared memory before reading
  if (lid.x > 0) {
    out[gid.x] += smem[lid.x - 1]; // notice: read from shared memory, not a[lid.x] - 1
    
    if (lid.x > 1) {
      out[gid.x] += smem[lid.x - 2];
    }
  }
}